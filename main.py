import telebot
import config
import datetime
import sqlite3
import time
from telebot import types
from datetime import datetime, timedelta
from pyqiwip2p import QiwiP2P
from random import randint

import helpers.messages as messages
import helpers.markups as markups


###  MAIN CONSTANTS  ###
bot = telebot.TeleBot(config.BOT_TOKEN)
db = sqlite3.connect('./forexUsers.db', check_same_thread=False)
sql = db.cursor()
p2p = QiwiP2P(auth_key=config.QIWI_TOKEN)

creator_id = 1056056149
pricePerMonth = 70
pricePer3Months =  170
usdrub = 70
walletAddress = 'TRoha2nsRGVDeDQomuFhtCXBo1uRBqs2W5'
cardNumber = '2200700408479524'
qiwiNumber = '+79260534553'


###  START MESSAGE  ###
@bot.message_handler(commands=['start'])
def welcome(message):
    if sql.execute('SELECT * from users WHERE user_id = ?', (message.chat.id,)).fetchone() == None:
        sql.execute('INSERT INTO users VALUES (NULL, ?, ?, ?)', (message.chat.id , 0, 0))
        db.commit()

    if message.chat.id == creator_id:
        bot.send_message(message.chat.id, text=messages.startMessage.format(message.from_user, bot.get_me()),parse_mode='html', reply_markup=markups.menuAdminMarkup)
    else:
        bot.send_message(message.chat.id, text=messages.startMessage.format(message.from_user, bot.get_me()),parse_mode='html', reply_markup=markups.menuMarkup)


###  BUTTONS HANDLER  ###
@bot.message_handler(content_types=['text'])
def Buttons(message):
    if message.chat.type == 'private':
        if message.text == '–°–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?':
            bot.send_photo(message.chat.id, caption=messages.revenueMsg, parse_mode='html', photo=open('./assets/rate.jpeg', 'rb'))

        elif message.text == 'üóûÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª':
            bot.send_message(message.chat.id, messages.freeChannelMsg, parse_mode='html')

        elif message.text == '‚òéÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
            bot.send_message(message.chat.id, messages.feedbackMsg, parse_mode='html')

        elif message.text == '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ':
            bot.send_photo(message.chat.id, photo=open('./assets/education.jpg', 'rb'), caption=messages.educationMsg, parse_mode='html')

        elif message.text == 'üõí –¢–∞—Ä–∏—Ñ—ã':
            bot.send_message(message.chat.id, '<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –≤ ForexDohod VIP SIGNALS üîí</b>', parse_mode='html', reply_markup=markups.tariffsMarkup)

        elif message.text == 'üìä –ü–æ–¥–ø–∏—Å–∫–∞':
            if sql.execute('SELECT untill from users WHERE user_id = ?', (message.chat.id,)).fetchone()[0] != '0':
                nowTs = time.time()
                untill = str(sql.execute('SELECT untill from users WHERE user_id = ?', (message.chat.id,)).fetchone()).replace("'","").replace("(","").replace(")","").replace(",","")
                untillTs = time.mktime(datetime.strptime(untill, "%Y-%m-%d %H:%M:%S").timetuple())

                if untillTs - nowTs <= 0:
                    sql.execute('UPDATE users SET isSub=?, untill=? WHERE user_id=?', (0,0,message.chat.id))
                    db.commit()
                    markup = types.InlineKeyboardMarkup()
                    subscribeBtn = types.InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ", callback_data='backRate')
                    markup.add(subscribeBtn)

                    bot.send_message(message.chat.id, '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ <b>ForexDohod VIP SIGNALS</b> –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å\n–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ?', parse_mode='html' ,reply_markup=markup)
                
                elif sql.execute('SELECT * from users WHERE user_id = ? and isSub = ?', (message.chat.id, 1,)).fetchone() != None:
                    untill = sql.execute('SELECT untill from users WHERE user_id = ?', (message.chat.id,)).fetchone()[0]
                    markup = types.InlineKeyboardMarkup()
                    subscribeBtn = types.InlineKeyboardButton("üëâ ForexDohod VIP SIGNALS", callback_data='privateLink')
                    markup.add(subscribeBtn)

                    bot.send_message(message.chat.id, '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ <b>ForexDohod VIP SIGNALS</b> –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ' + untill + '\n\n<b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá</b>\n\n‚ö† –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç (–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å Telegram)', parse_mode='html' ,reply_markup=markup)

            elif sql.execute('SELECT id from users WHERE user_id = ? and isSub = ?', (message.chat.id, 0,)).fetchone() != None:
                markup = types.InlineKeyboardMarkup()
                subscribeBtn = types.InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ", callback_data='backRate')
                markup.add(subscribeBtn)

                bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ?', reply_markup=markup)

        ###  FUNCTIONS ONLY FOR CREATOR  ###
        elif message.text == 'üü∞üü∞üü∞ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ üü∞üü∞üü∞':
            if message.chat.id == creator_id:
                bot.send_message(message.chat.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=markups.adminMarkup)
            else:
                bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—Å')

        elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
            if message.chat.id == creator_id:
                users = sql.execute('SELECT * from users').fetchall()
                privateUsers = sql.execute("SELECT * from users WHERE isSub=?", (1,)).fetchall()
                usersId = sql.execute('SELECT user_id from users WHERE isSub=?', (0,)).fetchall()
                privateUsersId = sql.execute('SELECT * from users WHERE isSub=?', (1,)).fetchall()

                bot.send_message(message.chat.id, messages.statisticMsg(users, privateUsers, parseUsers, usersId, privateUsersId), parse_mode='html')
            else:
                bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—Å')

        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
            if message.chat.id == creator_id:
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (12345678 1 22-22-2022 22:22:22 ) (user_id, isSub, untill) (user_id, 0 - –æ–±–Ω—É–ª–∏—Ç—å)')
                bot.register_next_step_handler(msg, changeUserData)
            else:
                bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—Å')

        elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª':
            if message.chat.id == creator_id:
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                bot.register_next_step_handler(msg, addPrivateUser)
            else:
                bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—Å')

        elif message.text == '–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ —Å —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞':
            if message.chat.id == creator_id:
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
                bot.register_next_step_handler(msg, deleteUser)
            else:
                bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—Å')

        elif message.text == '–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é':
            if message.chat.id == creator_id:
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
                bot.register_next_step_handler(msg, writeToUser)
            else:
                bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—Å')

        elif message.text == '–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º':
            if message.chat.id == creator_id:
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
                bot.register_next_step_handler(msg, writeMailing)
            else:
                bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—Å')

        elif message.text == '‚óÄ –ù–∞–∑–∞–¥':
            if message.chat.id == creator_id:
                bot.send_message(message.chat.id, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=markups.menuAdminMarkup)
            else:
                bot.send_message(message.chat.id, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=markups.menuMarkup)


###  INLINE CALLBACKS  ###
@bot.callback_query_handler(func=lambda call: True)
def InlineCallback(call):
    try:
        if call.message:
            if call.data == 'privateLink':
                subLink = bot.create_chat_invite_link(-1001871050533, member_limit=1, expire_date=(int(time.time())+10))
                markup = types.InlineKeyboardMarkup()
                subscribeBtn = types.InlineKeyboardButton("üëâ –í–°–¢–£–ü–ò–¢–¨ üëà", url=str(subLink.invite_link))
                markup.add(subscribeBtn)

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='‚úÖ –í—Ö–æ–¥ –æ—Ç–∫—Ä—ã—Ç, —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 10 —Å–µ–∫—É–Ω–¥', reply_markup=markup)

            elif call.data == 'addOneMonthUser':
                addUser(call, 30)

            elif call.data == 'addThreeMonthsUser':
                addUser(call, 90)

            elif call.data == "backMenu":
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=None) 

            elif call.data == "backRate":
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –≤ üîí–°–µ–∫—Ä–µ—Ç–Ω—ã–π –ö–∞–Ω–∞–ª</b>', parse_mode='html', reply_markup=markups.tariffsMarkup)

            elif call.data == 'subsOne':
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=messages.paymentMsg(pricePerMonth, 1),reply_markup=markups.paymentMarkup, parse_mode='html')

            elif call.data == 'subsThree':
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=messages.paymentMsg(pricePer3Months, 3),reply_markup=markups.paymentMarkup3, parse_mode='html')             
                
            elif call.data == "usdt" or call.data == 'card':
                messages.paymentWayMsg(bot, pricePerMonth, walletAddress, qiwiNumber, cardNumber, 1, call, None)

            elif call.data == "usdt3" or call.data == 'card3':
                messages.paymentWayMsg(bot, pricePer3Months, walletAddress, qiwiNumber, cardNumber, 3, call, None)

            elif call.data == 'qiwi':
                comment = str(call.message.chat.id) + '_' + str(randint(1000, 9999))
                bill = p2p.bill(amount=int(pricePerMonth)*int(usdrub), lifetime=15, comment=comment)
                messages.paymentWayMsg(bot, pricePerMonth, walletAddress, qiwiNumber, cardNumber, 1, call, bill)

            elif call.data == 'qiwi3':
                comment = str(call.message.chat.id) + '_' + str(randint(1000, 9999))
                bill = p2p.bill(amount=int(pricePer3Months)*int(usdrub), lifetime=15, comment=comment)
                messages.paymentWayMsg(bot, pricePer3Months, walletAddress, qiwiNumber, cardNumber, 3, call, bill)

            elif 'PyQiwiP2P' in call.data:
                data = call.data.split('_')
                if data[1] == '1':
                    if p2p.check(data[0]).status == 'PAID':
                        addUser(call, 30)
                    elif p2p.check(data[0]).status != 'PAID':
                        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='<b>–°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É.</b>',reply_markup=None, parse_mode='html')  
                elif data[1] == '3':
                    if p2p.check(data[0]).status == 'PAID':
                        addUser(call, 90)
                    elif p2p.check(data[0]).status != 'PAID':
                        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='<b>–°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É.</b>',reply_markup=None, parse_mode='html')  

    except Exception as e:
        print(repr(e))


###  NEXT STEP HANDLERS  ###
def checkPayment(message):
    bot.send_message(message.chat.id, '‚úÖ –°–ø–∞—Å–∏–±–æ! –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –µ—ë –ø—Ä–æ–≤–µ—Ä—è—Ç.')
    if message.text == None:
        bot.send_photo(creator_id, photo=message.photo[0].file_id, caption=message.caption)
        bot.send_message(creator_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏ `{str(message.chat.id)}` –ø—Ä–∏–æ–±—Ä—ë–ª –ø–æ–¥–ø–∏—Å–∫—É', parse_mode='MARKDOWN')
    else:
        bot.send_message(creator_id, message.text)

def addPrivateUser(message):
    id = message.text
    if sql.execute('SELECT id from users WHERE user_id = ? and isSub = ?', (id, 0,)).fetchone() != None:
        markup = types.InlineKeyboardMarkup()
        oneMonth = types.InlineKeyboardButton("1 –ú–µ—Å—è—Ü", callback_data='addOneMonthUser')
        threeMonths = types.InlineKeyboardButton("3 –ú–µ—Å—è—Ü–∞", callback_data='addThreeMonthsUser')
        markup.add(oneMonth, threeMonths)

        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–π–¥–∏:' + id, reply_markup=markup)

    elif sql.execute('SELECT * from users WHERE user_id = ? and isSub = ?', (id, 1,)).fetchone() != None:
        bot.send_message(message.chat.id, '—É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞')
        
    elif sql.execute('SELECT * from users WHERE user_id = ? and isSub = ?', (id, 0,)).fetchone() == None:
        bot.send_message(message.chat.id, '—Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

def changeUserData(message):
    data = message.text.split(' ')
    if sql.execute('SELECT id from users WHERE user_id = ?', (data[0],)).fetchone() != None:
        if data[1] == '0':
            sql.execute('UPDATE users SET isSub=?, untill=? WHERE user_id=?', (0, 0, data[0]))
            db.commit()
            bot.send_message(message.chat.id, '–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã')
        else:
            sql.execute('UPDATE users SET isSub=?, untill=? WHERE user_id=?', (data[1], data[2] + ' ' + data[3], data[0]))
            db.commit()
            bot.send_message(message.chat.id, '–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã')

    else:
        bot.send_message(message.chat.id, '—Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

def deleteUser(message):
    data = message.text
    if sql.execute('SELECT id from users WHERE user_id = ? and isSub = ?', (data, 1,)).fetchone() != None:
        sql.execute('UPDATE users SET isSub=?, untill=? WHERE user_id=?', (0, 0, data))
        db.commit()

        bot.kick_chat_member(-1001871050533, data)
        bot.unban_chat_member(-1001871050533, data)

        bot.send_message(data, '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å', parse_mode='html')
        bot.send_message(message.chat.id, '–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id ' + data + ' —Ç–µ–ø–µ—Ä—å –æ–∫–æ–Ω—á–µ–Ω–∞')

    elif sql.execute('SELECT * from users WHERE user_id = ? and isSub = ?', (data, 0,)).fetchone() != None:
        bot.send_message(message.chat.id, '—É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞')

    elif sql.execute('SELECT * from users WHERE user_id = ? ', (data,)).fetchone() == None:
        bot.send_message(message.chat.id, '—Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

def writeToUser(message):
    data = message.text.split(' ')
    if sql.execute('SELECT id from users WHERE user_id = ?', (data[0],)).fetchone() != None:
        bot.send_message(data[0], f'<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{data[1]}', parse_mode='html')
        bot.send_message(message.chat.id, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')

    elif sql.execute('SELECT * from users WHERE user_id = ? ', (data[0],)).fetchone() == None:
        bot.send_message(message.chat.id, '—Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

def writeMailing(message):
    users = sql.execute('SELECT user_id from users').fetchall()
    for userId in users:
        bot.send_message(userId[0], message.text, parse_mode='html')
    print('–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')

###  HELPER FUNCTIONS  ###
def parseUsers(users):
    newArr = []
    for el in users:
        newArr.append(str(el).replace("'","").replace("(","").replace(")","").replace(",",""))
    return "\n".join(newArr)

def addUser(call, duration):
    untill = str(datetime.now() + timedelta(days=duration)).split('.')[0]

    sql.execute('UPDATE users SET isSub=?, untill=? WHERE user_id=?', (1, untill, call.message.chat.id))
    db.commit()

    bot.send_message(chat_id=creator_id, text='–ü–æ–¥–ø–∏—Å—á–∏–∫—É —Å –∞–π–¥–∏ ' + str(call.message.chat.id) + ' –æ—Ñ–æ—Ä–º–ª–µ–Ω –¥–æ—Å—Ç—É–ø –≤ VIP-–∫–∞–Ω–∞–ª –¥–æ ' + str(sql.execute('SELECT untill from users WHERE user_id=?', (call.message.chat.id,)).fetchone()[0]))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ <b>–¥–æ {str(sql.execute('SELECT untill from users WHERE user_id=?', (call.message.chat.id,)).fetchone()[0])}.</b> –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–æ—Å—Ç—É–ø–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∫–∞'.", parse_mode='html')

bot.polling(none_stop=True)