import telebot
import config
import sqlite3
from telebot import types
import helpers.messages as messages
import helpers.markups as markups

bot = telebot.TeleBot(config.BOT_TOKEN)
db = sqlite3.connect('./forexUsers.db', check_same_thread=False)
sql = db.cursor()
creator_id = 1056056149

priceGold = '100.000'
priceGoldMini = '40.000'

@bot.message_handler(commands=['start'])
def welcome(message):
    if sql.execute('SELECT * from users WHERE user_id = ?', (message.chat.id,)).fetchone() == None:
        sql.execute('INSERT INTO users VALUES (NULL, ?, ?, ?)', (message.chat.id , 0, 0))
        db.commit()

    if message.chat.id == creator_id:
        bot.send_message(message.chat.id, text=messages.startMessage.format(message.from_user, bot.get_me()),parse_mode='html', reply_markup=markups.menuAdminMarkup)
    else:
        bot.send_message(message.chat.id, text=messages.startMessage.format(message.from_user, bot.get_me()),parse_mode='html', reply_markup=markups.menuMarkup)


@bot.message_handler(content_types=['text'])
def Buttons(message):
    if message.chat.type == 'private':
        if message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏':
            bot.send_photo(message.chat.id, caption=messages.profitabilityMsg, parse_mode='html', photo=open('./assets/rate.jpg', 'rb'))
            bot.send_document(message.chat.id, document=open('./assets/GOLD.htm', 'rb'))
            bot.send_document(message.chat.id, document=open('./assets/GOLD.gif', 'rb'))
            bot.send_document(message.chat.id, document=open('./assets/GOLDmini.htm', 'rb'))
            bot.send_document(message.chat.id, document=open('./assets/GOLDmini.gif', 'rb'))

        elif message.text == 'üóûÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª':
            bot.send_message(message.chat.id, messages.freeChannelMsg, parse_mode='html')

        elif message.text == '‚òéÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
            bot.send_message(message.chat.id, messages.feedbackMsg, parse_mode='html')

        elif message.text == '–ß—Ç–æ –∑–∞ —Ä–æ–±–æ—Ç?':
            bot.send_photo(message.chat.id, photo=open('./assets/faq.jpg', 'rb'), caption=messages.faqMsg, parse_mode='html')

        elif message.text == 'ü§ñ –ö—É–ø–∏—Ç—å –¢–æ—Ä–≥–æ–≤–æ–≥–æ –†–æ–±–æ—Ç–∞':
            bot.send_message(message.chat.id, '<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—è–π –¥–ª—è –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç –¢–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞.</b>', parse_mode='html', reply_markup=markups.tariffsMarkup)
            
        elif message.text == '‚óÄ –ù–∞–∑–∞–¥':
            if message.chat.id == creator_id:
                bot.send_message(message.chat.id, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=markups.menuAdminMarkup)
            else:
                bot.send_message(message.chat.id, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=markups.menuMarkup)

        ### FUNCTIONS ONLY FOR ADMINS ###
        elif message.text == 'üü∞üü∞üü∞ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ üü∞üü∞üü∞':
            if message.chat.id == creator_id:
                bot.send_message(message.chat.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=markups.adminMarkup)
            else:
                bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—Å')

        elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
            if message.chat.id == creator_id:
                users = sql.execute('SELECT * from users').fetchall()
                bot.send_message(message.chat.id, messages.statisticMsg(users), parse_mode='html')
            else:
                bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—Å')

        elif message.text == '–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º':
            if message.chat.id == creator_id:
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (parse_mode=markdown)\n*text* - bold\n[Link text](https://link-url-here.org)')
                bot.register_next_step_handler(msg, writeMailing)
            else:
                bot.send_message(message.chat.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—Å')



###  INLINE CALLBACKS  ###
@bot.callback_query_handler(func=lambda call: True)
def InlineCallback(call):
    try:
        if call.message:
            if call.data == "backMenu":
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=None) 

            elif call.data == "backRate":
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—è–π –¥–ª—è –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç –¢–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞.</b>', parse_mode='html', reply_markup=markups.tariffsMarkup)

            elif call.data == 'subsGold':
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=messages.paymentMsg(priceGold, 'gold'), parse_mode='html', reply_markup=markups.paymentMarkup)

            elif call.data == 'subsGoldMini':
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=messages.paymentMsg(priceGoldMini, 'goldMini'), parse_mode='html', reply_markup=markups.paymentMarkup)

            elif call.data == 'docBtn':
                bot.send_message(creator_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏ <b>{call.message.chat.id}</b> –æ—Ç–∫—Ä—ã–ª —á–∞—Ç —Å DOC –ø–æ –ø–æ–≤–æ–¥—É –ø–æ–∫—É–ø–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞', parse_mode='html')

    except Exception as e:
        print(repr(e))


### NEXT STEP MESSAGE HANDLERS ###
def writeMailing(message):
    users = sql.execute('SELECT user_id from users').fetchall()
    if message.text != '‚óÄ –ù–∞–∑–∞–¥' and message.text != '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' and message.text != '–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º':
        if message.photo:
            for userId in users:
                bot.send_photo(userId[0], photo=message.photo[0].file_id, caption=message.caption, parse_mode='markdown')
            bot.send_message(creator_id, '–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', parse_mode='html')
        else:
            for userId in users:
                bot.send_message(userId[0], message.text, parse_mode='markdown')
            bot.send_message(chat_id=creator_id, text='–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', parse_mode='html')
    else:
        bot.send_message(creator_id, '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', parse_mode='html')

if __name__ == '__main__':
    bot.polling(none_stop=True)
